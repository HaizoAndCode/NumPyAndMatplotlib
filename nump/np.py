
import numpy as np
import random

a = np.array([20, 30, 40, 50])
b = np.arange(4)
a + b # array([20, 31, 42, 53])
a - b # array([20, 29, 38, 47])
a * b # array([  0,  30,  80, 150])
# a / b # При делении на 0 возвращается inf (бесконечность)
a ** b # array([     1,     30,   1600, 125000])
# a % b # При взятии остатка от деления на 0 возвращается 0


c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([[1, 2], [3, 4], [5, 6]])
# Print(c + d)
# Вывод: 
# Traceback (most recent call last):
# File "<input>", line 1, in <module>
# ValueError: operands could not be broadcast together with shapes (2,3) (3,2)
# !массивы должны быть одинаковых размеров.

a + 1 # array([21, 31, 41, 51])
a ** 3 # array([  8000,  27000,  64000, 125000])
a < 35  # array([ True,  True, False, False], dtype=bool)

np.cos(a) # array([ 0.40808206,  0.15425145, -0.66693806,  0.96496603])
np.arctan(a) # array([ 1.52083793,  1.53747533,  1.54580153,  1.55079899])
np.sinh(a) # array([  2.42582598e+08,   5.34323729e+12,   1.17692633e+17, 2.59235276e+21])

a = np.array([[1, 2, 3], [4, 5, 6]])
np.sum(a) # 21
a.sum() # 21
a.min() #1
a.max() # 6

# для указанной оси массива:
a.min(axis=0)  # Наименьшее число в каждом столбце: array([1, 2, 3])
a.min(axis=1)  # Наименьшее число в каждой строке: array([1, 4])

a = np.array([1, 2, 3, 4, 5], dtype='float32')
# [1. 2. 3. 4. 5.]

print(np.array([range(i, i+3) for i in [2, 4, 6]]))
# [[2 3 4]
#  [4 5 6]
#  [6 7 8]]
print()

print(np.zeros(10, dtype=int))
# [0 0 0 0 0 0 0 0 0 0]
print()

print(np.ones((3, 5), dtype=float))
# [[1. 1. 1. 1. 1.]
#  [1. 1. 1. 1. 1.]
#  [1. 1. 1. 1. 1.]]
print()

print(np.full((3, 5), 3.14))
# [[3.14 3.14 3.14 3.14 3.14]
#  [3.14 3.14 3.14 3.14 3.14]
#  [3.14 3.14 3.14 3.14 3.14]]
print()

print(np.arange(0, 20, 2))
# [ 0  2  4  6  8 10 12 14 16 18]
print()

print(np.linspace(1, 2, 5))
# [1.   1.25 1.5  1.75 2.  ]
print()

print(np.random.random((3, 3)))
# [[0.32550594 0.0458465  0.36873   ]
#  [0.1125698  0.15478695 0.54431966]  Таким образом, функция будет создавать матрицу размером 3x3 и заполнять её случайными значениями от 0 до 1
#  [0.39315937 0.42601966 0.00551691]]
print()

# Функция np.random.normal() используется для генерации случайных чисел из нормального (гауссова) распределения.
print(np.random.normal(0, 1, (3, 3)))
# [[ 0.1333598   0.99853519  0.25234233]    - (3, 3) - форма (shape) массива, который будет сгенерирован. В данном случае это массив размером 3x3
#  [ 1.34533931  0.46443882 -0.14552536]    - 0 - среднее значение (mean) нормального распределения
#  [ 0.43896641 -1.33945044  0.5076308 ]]   - 1 - стандартное отклонение (standard deviation) нормального распределения
print()

print(np.random.randint(0, 10, (3, 3)))
# Функция np.random.randint() используется для генерации случайных целых чисел в указанном диапазоне с заданной формой массива.
# - 0 - минимальное значение, которое может быть сгенерировано.
# - 10 - максимальное значение, которое может быть сгенерировано. Включается в диапазон.
# - (3, 3) - форма (размерность) массива, который будет сгенерирован. Здесь создается массив размером 3x3.
print()

# еденичная матрица:
print(np.eye(3))
# [[1. 0. 0.]
#  [0. 1. 0.]
#  [0. 0. 1.]]
print()

print(np.empty(3))
# [1. 1. 1.]
print()
